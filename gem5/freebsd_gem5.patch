Index: sys/arm/arm/generic_timer.c
===================================================================
--- sys/arm/arm/generic_timer.c	(revision 282765)
+++ sys/arm/arm/generic_timer.c	(working copy)
@@ -85,7 +85,7 @@
 static struct resource_spec timer_spec[] = {
 	{ SYS_RES_IRQ,		0,	RF_ACTIVE },	/* Secure */
 	{ SYS_RES_IRQ,		1,	RF_ACTIVE },	/* Non-secure */
-	{ SYS_RES_IRQ,		2,	RF_ACTIVE },	/* Virt */
+	{ SYS_RES_IRQ,		2,	RF_ACTIVE | RF_OPTIONAL }, /* Virt */
 	{ SYS_RES_IRQ,		3,	RF_ACTIVE | RF_OPTIONAL	}, /* Hyp */
 	{ -1, 0 }
 };
@@ -307,10 +307,13 @@
 	sc->physical = false;
 #endif
 
+	/* Gem5 TODO */
+	sc->physical = true;
+
 	arm_tmr_sc = sc;
 
 	/* Setup secure, non-secure and virtual IRQs handler */
-	for (i = 0; i < 3; i++) {
+	for (i = 0; i < 2; i++) {
 		error = bus_setup_intr(dev, sc->res[i], INTR_TYPE_CLK,
 		    arm_tmr_intr, NULL, sc, &sc->ihl[i]);
 		if (error) {
Index: sys/arm64/arm64/gic.c
===================================================================
--- sys/arm64/arm64/gic.c	(revision 282765)
+++ sys/arm64/arm64/gic.c	(working copy)
@@ -257,7 +257,8 @@
 
 	/* Set all the interrupts to be in Group 0 (secure) */
 	for (i = 0; i < sc->nirqs; i += 32) {
-		gic_d_write_4(sc, GICD_IGROUPR(i >> 5), 0);
+		/* Gem5 TODO */
+		//gic_d_write_4(sc, GICD_IGROUPR(i >> 5), 0);
 	}
 
 	/* Enable CPU interface */
@@ -316,7 +317,8 @@
 	struct arm_gic_softc *sc = device_get_softc(dev);
 
 	gic_d_write_4(sc, GICD_ICENABLER(irq >> 5), (1UL << (irq & 0x1F)));
-	gic_c_write_4(sc, GICC_EOIR, irq);
+	/* Gem5 TODO */
+	//gic_c_write_4(sc, GICC_EOIR, irq);
 }
 
 void
Index: sys/arm64/arm64/locore.S
===================================================================
--- sys/arm64/arm64/locore.S	(revision 282765)
+++ sys/arm64/arm64/locore.S	(working copy)
@@ -288,7 +288,7 @@
 	/* Get the number of l2 pages to allocate, rounded down */
 	lsr	x10, x8, #(L2_SHIFT)
 	/* Add 4 MiB for any rounding above and the module data */
-	add	x10, x10, #2
+	add	x10, x10, #4
 
 	/* Create the kernel space L2 table */
 	mov	x6, x26
Index: sys/arm64/arm64/machdep.c
===================================================================
--- sys/arm64/arm64/machdep.c	(revision 282765)
+++ sys/arm64/arm64/machdep.c	(working copy)
@@ -807,7 +807,16 @@
 	physmap_idx = 0;
 	efihdr = (struct efi_map_header *)preload_search_info(kmdp,
 	    MODINFO_METADATA | MODINFOMD_EFI_MAP);
-	add_efi_map_entries(efihdr, physmap, &physmap_idx);
+	//add_efi_map_entries(efihdr, physmap, &physmap_idx);
+	if (efihdr != NULL)
+		add_efi_map_entries(efihdr, physmap, &physmap_idx);
+	else {
+		physmap[0] = 0x80000000ul;
+		physmap[1] = 0x90000000ul;
+		physmap[2] = 0;
+		physmap[3] = 0;
+		physmap_idx = 2;
+	}
 
 	/* Print the memory map */
 	mem_len = 0;
Index: sys/arm64/conf/GENERIC
===================================================================
--- sys/arm64/conf/GENERIC	(revision 282765)
+++ sys/arm64/conf/GENERIC	(working copy)
@@ -66,8 +66,14 @@
 options 	KDTRACE_HOOKS		# Kernel DTrace hooks
 options 	VFP			# Floating-point support
 
+options         ROOTDEVNAME=\"ufs:ada0s2\"
+
+# Use for virtio
+# options         ROOTDEVNAME=\"ufs:vtbd0s2\"
+
 device		virtio
 device		virtio_mmio
+device		virtio_pci
 device		virtio_blk
 device		vtnet
 
@@ -91,4 +97,14 @@
 # Note that 'bpf' is required for DHCP.
 device		bpf		# Berkeley packet filter
 
+device		pci
+
+device		ata
+device		scbus
+device		pass
+device		da
+device		ada
+
+device		em
+
 options 	FDT
Index: sys/arm64/include/fdt.h
===================================================================
--- sys/arm64/include/fdt.h	(revision 0)
+++ sys/arm64/include/fdt.h	(working copy)
@@ -0,0 +1,48 @@
+/*-
+ * Copyright (c) 2010 The FreeBSD Foundation
+ * All rights reserved.
+ *
+ * This software was developed by Semihalf under sponsorship from
+ * the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ * $FreeBSD$
+ */
+
+#ifndef _MACHINE_FDT_H_
+#define _MACHINE_FDT_H_
+
+#include <machine/bus.h>
+
+/* Max interrupt number */
+#define FDT_INTR_MAX	NIRQ
+
+/* Map phandle/intpin pair to global IRQ number */
+#define	FDT_MAP_IRQ(node, pin)	(pin)
+
+/*
+ * Bus space tag. XXX endianess info needs to be derived from the blob.
+ */
+extern bus_space_tag_t fdtbus_bs_tag;
+
+#endif /* _MACHINE_FDT_H_ */

Property changes on: sys/arm64/include/fdt.h
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Added: svn:keywords
## -0,0 +1 ##
+FreeBSD=%H
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Index: sys/conf/files.arm64
===================================================================
--- sys/conf/files.arm64	(revision 282765)
+++ sys/conf/files.arm64	(working copy)
@@ -41,6 +41,7 @@
 dev/ofw/ofw_cpu.c		optional	fdt
 dev/psci/psci.c			optional	psci
 dev/psci/psci_arm64.S		optional	psci
+dev/pci/pci-host-generic.c	optional	pci fdt
 dev/uart/uart_cpu_fdt.c		optional	uart fdt
 dev/uart/uart_dev_pl011.c	optional	uart pl011
 kern/kern_clocksource.c		standard
Index: sys/dev/e1000/if_lem.c
===================================================================
--- sys/dev/e1000/if_lem.c	(revision 282765)
+++ sys/dev/e1000/if_lem.c	(working copy)
@@ -2260,7 +2260,7 @@
 	adapter->hw.hw_addr = (u8 *)&adapter->osdep.mem_bus_space_handle;
 
 	/* Only older adapters use IO mapping */
-	if (adapter->hw.mac.type > e1000_82543) {
+	if (adapter->hw.mac.type > e1000_82543 && 1 == 0) {
 		/* Figure our where our IO BAR is ? */
 		for (rid = PCIR_BAR(0); rid < PCIR_CIS;) {
 			val = pci_read_config(dev, rid, 4);
Index: sys/dev/pci/pci-host-generic.c
===================================================================
--- sys/dev/pci/pci-host-generic.c	(revision 0)
+++ sys/dev/pci/pci-host-generic.c	(working copy)
@@ -0,0 +1,689 @@
+/*-
+ * Copyright (c) 2015 Ruslan Bukin <br@bsdpad.com>
+ * Copyright (c) 2014 The FreeBSD Foundation
+ * All rights reserved.
+ *
+ * This software was developed by Semihalf under
+ * the sponsorship of the FreeBSD Foundation.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+/* Generic ECAM PCIe driver */
+
+#include <sys/cdefs.h>
+__FBSDID("$FreeBSD$");
+
+#include <sys/param.h>
+#include <sys/systm.h>
+#include <sys/malloc.h>
+#include <sys/kernel.h>
+#include <sys/rman.h>
+#include <sys/module.h>
+#include <sys/bus.h>
+#include <sys/endian.h>
+#include <sys/cpuset.h>
+#include <sys/rwlock.h>
+#include <dev/ofw/openfirm.h>
+#include <dev/ofw/ofw_bus.h>
+#include <dev/ofw/ofw_bus_subr.h>
+#include <dev/pci/pcivar.h>
+#include <dev/pci/pcireg.h>
+#include <dev/pci/pcib_private.h>
+#include <machine/cpu.h>
+#include <machine/bus.h>
+#include <machine/fdt.h>
+#include <machine/intr.h>
+#include <dev/fdt/fdt_common.h>
+#include <vm/vm_page.h>
+
+#include "pcib_if.h"
+
+/* Assembling ECAM Configuration Address */
+#define	PCIE_BUS_SHIFT		20
+#define	PCIE_SLOT_SHIFT		15
+#define	PCIE_FUNC_SHIFT		12
+#define	PCIE_BUS_MASK		0xFF
+#define	PCIE_SLOT_MASK		0x1F
+#define	PCIE_FUNC_MASK		0x07
+#define	PCIE_REG_MASK		0xFFF
+
+#define	PCIE_ADDR_OFFSET(bus, slot, func, reg)			\
+	((((bus) & PCIE_BUS_MASK) << PCIE_BUS_SHIFT)	|	\
+	(((slot) & PCIE_SLOT_MASK) << PCIE_SLOT_SHIFT)	|	\
+	(((func) & PCIE_FUNC_MASK) << PCIE_FUNC_SHIFT)	|	\
+	((reg) & PCIE_REG_MASK))
+
+#define	MAX_RANGES_TUPLES	5
+#define	MIN_RANGES_TUPLES	2
+
+#define	PCI_IO_WINDOW_OFFSET	0x1000
+#define	PCI_IRQ_START		32
+#define	PCI_IRQ_END		(PCI_IRQ_START + 4)
+
+#define	SPACE_CODE_SHIFT	24
+#define	SPACE_CODE_MASK		0x3
+#define	SPACE_CODE_IO_SPACE	0x1
+#define	PROPS_CELL_SIZE		1
+#define	PCI_ADDR_CELL_SIZE	2
+
+struct pcie_range {
+	uint64_t	pci_base;
+	uint64_t	phys_base;
+	uint64_t	size;
+	uint64_t	flags;
+#define	FLAG_IO		(1 << 0)
+#define	FLAG_MEM	(1 << 1)
+};
+
+struct generic_pcie_softc {
+	struct pcie_range	ranges[MAX_RANGES_TUPLES];
+	struct rman		mem_rman;
+	struct rman		io_rman;
+	struct rman		irq_rman;
+	struct resource		*res;
+	struct resource		*res1;
+	int			ecam;
+	bus_space_tag_t		bst;
+	bus_space_handle_t	bsh;
+	device_t		dev;
+	bus_space_handle_t	ioh;
+};
+
+/* Forward prototypes */
+
+static int generic_pcie_probe(device_t dev);
+static int generic_pcie_attach(device_t dev);
+static int parse_pci_mem_ranges(struct generic_pcie_softc *sc);
+static uint32_t generic_pcie_read_config(device_t dev, u_int bus, u_int slot,
+    u_int func, u_int reg, int bytes);
+static void generic_pcie_write_config(device_t dev, u_int bus, u_int slot,
+    u_int func, u_int reg, uint32_t val, int bytes);
+static int generic_pcie_maxslots(device_t dev);
+static int generic_pcie_read_ivar(device_t dev, device_t child, int index,
+    uintptr_t *result);
+static int generic_pcie_write_ivar(device_t dev, device_t child, int index,
+    uintptr_t value);
+static struct resource *generic_pcie_alloc_resource(device_t dev,
+    device_t child, int type, int *rid, u_long start, u_long end,
+    u_long count, u_int flags);
+static int generic_pcie_release_resource(device_t dev, device_t child,
+    int type, int rid, struct resource *res);
+static int generic_pcie_map_msi(device_t pcib, device_t child, int irq,
+    uint64_t *addr, uint32_t *data);
+static int generic_pcie_alloc_msix(device_t pcib, device_t child, int *irq);
+static int generic_pcie_release_msix(device_t pcib, device_t child, int irq);
+static int generic_pcie_alloc_msi(device_t pcib, device_t child, int count,
+    int maxcount, int *irqs);
+static int generic_pcie_release_msi(device_t pcib, device_t child, int count,
+    int *irqs);
+
+static int
+generic_pcie_probe(device_t dev)
+{
+
+	if (!ofw_bus_status_okay(dev))
+		return (ENXIO);
+
+	if (ofw_bus_is_compatible(dev, "pci-host-ecam-generic")) {
+		device_set_desc(dev, "Generic PCI host controller");
+		return (BUS_PROBE_DEFAULT);
+	}
+
+	return (ENXIO);
+}
+
+static int
+generic_pcie_attach(device_t dev)
+{
+	struct generic_pcie_softc *sc;
+	uint64_t phys_base;
+	uint64_t pci_base;
+	uint64_t size;
+	int error;
+	int tuple;
+	int rid;
+
+	sc = device_get_softc(dev);
+	sc->dev = dev;
+
+	rid = 0;
+	sc->res = bus_alloc_resource_any(dev, SYS_RES_MEMORY, &rid, RF_ACTIVE);
+	if (sc->res == NULL) {
+		device_printf(dev, "could not map memory.\n");
+		return (ENXIO);
+	}
+
+	sc->bst = rman_get_bustag(sc->res);
+	sc->bsh = rman_get_bushandle(sc->res);
+
+	sc->mem_rman.rm_type = RMAN_ARRAY;
+	sc->mem_rman.rm_descr = "PCIe Memory";
+	sc->io_rman.rm_type = RMAN_ARRAY;
+	sc->io_rman.rm_descr = "PCIe IO window";
+
+	/* Retrieve 'ranges' property from FDT */
+	if (bootverbose)
+		device_printf(dev, "parsing FDT for ECAM%d:\n",
+		    sc->ecam);
+	if (parse_pci_mem_ranges(sc))
+		return (ENXIO);
+
+	/* Initialize rman and allocate memory regions */
+	error = rman_init(&sc->mem_rman);
+	if (error) {
+		device_printf(dev, "rman_init() failed. error = %d\n", error);
+		return (error);
+	}
+
+	error = rman_init(&sc->io_rman);
+	if (error) {
+		device_printf(dev, "rman_init() failed. error = %d\n", error);
+		return (error);
+	}
+
+	for (tuple = 0; tuple < MAX_RANGES_TUPLES; tuple++) {
+		phys_base = sc->ranges[tuple].phys_base;
+		pci_base = sc->ranges[tuple].pci_base;
+		size = sc->ranges[tuple].size;
+		if (phys_base == 0 || size == 0)
+			continue; /* empty range element */
+		if (sc->ranges[tuple].flags & FLAG_MEM) {
+			error = rman_manage_region(&sc->mem_rman,
+						phys_base,
+						phys_base + size);
+		} else if (sc->ranges[tuple].flags & FLAG_IO) {
+			error = rman_manage_region(&sc->io_rman,
+					pci_base + PCI_IO_WINDOW_OFFSET,
+					pci_base + PCI_IO_WINDOW_OFFSET + size);
+		} else
+			continue;
+		if (error) {
+			device_printf(dev, "rman_manage_region() failed."
+						"error = %d\n", error);
+			rman_fini(&sc->mem_rman);
+			return (error);
+		}
+	}
+
+	/* TODO: get IRQ numbers from FDT */
+	sc->irq_rman.rm_type = RMAN_ARRAY;
+	sc->irq_rman.rm_descr = "Generic PCIe IRQs";
+	if (rman_init(&sc->irq_rman) != 0 ||
+	    rman_manage_region(&sc->irq_rman, PCI_IRQ_START,
+		PCI_IRQ_END) != 0) {
+		panic("Generic PCI: failed to set up IRQ rman");
+	}
+
+	device_add_child(dev, "pci", -1);
+	return (bus_generic_attach(dev));
+}
+
+static int
+parse_pci_mem_ranges(struct generic_pcie_softc *sc)
+{
+	pcell_t pci_addr_cells, parent_addr_cells, size_cells;
+	pcell_t *ranges_buf, *cell_ptr;
+	int cells_count, tuples_count;
+	pcell_t attributes;
+	phandle_t node;
+	int tuple;
+	int rv;
+
+	node = ofw_bus_get_node(sc->dev);
+
+	if (fdt_addrsize_cells(node, &pci_addr_cells, &size_cells))
+		return (ENXIO);
+
+	parent_addr_cells = fdt_parent_addr_cells(node);
+	if (parent_addr_cells != 2 || pci_addr_cells != 3 || size_cells != 2) {
+		device_printf(sc->dev,
+		    "Unexpected number of address or size cells in FDT\n");
+		return (ENXIO);
+	}
+
+	cells_count = OF_getprop_alloc(node, "ranges",
+	    sizeof(pcell_t), (void **)&ranges_buf);
+	if (cells_count == -1) {
+		device_printf(sc->dev, "Error parsing FDT 'ranges' property\n");
+		return (ENXIO);
+	}
+
+	tuples_count = cells_count /
+	    (pci_addr_cells + parent_addr_cells + size_cells);
+	if (tuples_count > MAX_RANGES_TUPLES || tuples_count < MIN_RANGES_TUPLES) {
+		device_printf(sc->dev,
+		    "Unexpected number of 'ranges' tuples in FDT\n");
+		rv = ENXIO;
+		goto out;
+	}
+
+	cell_ptr = ranges_buf;
+
+	for (tuple = 0; tuple < tuples_count; tuple++) {
+		attributes = fdt_data_get((void *)cell_ptr, PROPS_CELL_SIZE);
+		attributes = (attributes >> SPACE_CODE_SHIFT) & SPACE_CODE_MASK;
+		if (attributes == SPACE_CODE_IO_SPACE) {
+			sc->ranges[tuple].flags |= FLAG_IO;
+		} else {
+			sc->ranges[tuple].flags |= FLAG_MEM;
+		}
+		cell_ptr += PROPS_CELL_SIZE; /* move ptr to pci addr */
+		sc->ranges[tuple].pci_base = fdt_data_get((void *)cell_ptr, 2);
+		cell_ptr += PCI_ADDR_CELL_SIZE; /* move ptr to cpu addr */
+		sc->ranges[tuple].phys_base = fdt_data_get((void *)cell_ptr, 2);
+		cell_ptr += parent_addr_cells; /* move ptr to size cells*/
+		sc->ranges[tuple].size = fdt_data_get((void *)cell_ptr, 2);
+		cell_ptr += size_cells; /* move ptr to next tuple*/
+
+		if (bootverbose) {
+			device_printf(sc->dev,
+			    "\tPCI addr: 0x%jx, CPU addr: 0x%jx, Size: 0x%jx\n",
+			    sc->ranges[tuple].pci_base,
+			    sc->ranges[tuple].phys_base,
+			    sc->ranges[tuple].size);
+		}
+
+	}
+	for (; tuple < MAX_RANGES_TUPLES; tuple++) {
+		/* zero-fill remaining tuples to mark empty elements in array */
+		sc->ranges[tuple].phys_base = 0;
+		sc->ranges[tuple].size = 0;
+	}
+
+	rv = 0;
+out:
+	free(ranges_buf, M_OFWPROP);
+	return (rv);
+}
+
+static uint32_t
+generic_pcie_read_config(device_t dev, u_int bus, u_int slot,
+    u_int func, u_int reg, int bytes)
+{
+	struct generic_pcie_softc *sc;
+	bus_space_handle_t h;
+	bus_space_tag_t	t;
+	uint64_t offset;
+	uint32_t data;
+
+	if (bus > 255 || slot > 31 || func > 7 || reg > 4095)
+		return (~0U);
+
+	sc = device_get_softc(dev);
+
+	offset = PCIE_ADDR_OFFSET(bus, slot, func, reg);
+	t = sc->bst;
+	h = sc->bsh;
+
+	switch (bytes) {
+	case 1:
+		data = bus_space_read_1(t, h, offset);
+		break;
+	case 2:
+		data = le16toh(bus_space_read_2(t, h, offset));
+		break;
+	case 4:
+		data = le32toh(bus_space_read_4(t, h, offset));
+		break;
+	default:
+		return (~0U);
+	}
+
+	if (reg == PCIR_INTLINE) {
+		data += PCI_IRQ_START;
+	}
+
+	return (data);
+}
+
+static void
+generic_pcie_write_config(device_t dev, u_int bus, u_int slot,
+    u_int func, u_int reg, uint32_t val, int bytes)
+{
+	struct generic_pcie_softc *sc;
+	bus_space_handle_t h;
+	bus_space_tag_t t;
+	uint64_t offset;
+
+	if (bus > 255 || slot > 31 || func > 7 || reg > 4095)
+		return;
+
+	sc = device_get_softc(dev);
+
+	offset = PCIE_ADDR_OFFSET(bus, slot, func, reg);
+
+	t = sc->bst;
+	h = sc->bsh;
+
+	switch (bytes) {
+	case 1:
+		bus_space_write_1(t, h, offset, val);
+		break;
+	case 2:
+		bus_space_write_2(t, h, offset, htole16(val));
+		break;
+	case 4:
+		bus_space_write_4(t, h, offset, htole32(val));
+		break;
+	default:
+		return;
+	}
+}
+
+static int
+generic_pcie_maxslots(device_t dev)
+{
+
+	return (31); /* max slots per bus acc. to standard */
+}
+
+static int
+generic_pcie_read_ivar(device_t dev, device_t child, int index,
+    uintptr_t *result)
+{
+	struct generic_pcie_softc *sc;
+	int secondary_bus;
+
+	sc = device_get_softc(dev);
+
+	if (index == PCIB_IVAR_BUS) {
+		/* this pcib adds only pci bus 0 as child */
+		secondary_bus = 0;
+		*result = secondary_bus;
+		return (0);
+
+	}
+
+	if (index == PCIB_IVAR_DOMAIN) {
+		*result = sc->ecam;
+		return (0);
+	}
+
+	device_printf(dev, "ERROR: Unknown index.\n");
+	return (ENOENT);
+}
+
+static int
+generic_pcie_write_ivar(device_t dev, device_t child, int index,
+    uintptr_t value)
+{
+
+	return (ENOENT);
+}
+
+static struct rman *
+generic_pcie_rman(struct generic_pcie_softc *sc, int type)
+{
+
+	switch (type) {
+	case SYS_RES_IOPORT:
+		return (&sc->io_rman);
+	case SYS_RES_MEMORY:
+		return (&sc->mem_rman);
+	case SYS_RES_IRQ:
+		return (&sc->irq_rman);
+	default:
+		break;
+	}
+
+	return (NULL);
+}
+
+static int
+generic_pcie_release_resource(device_t dev, device_t child, int type,
+    int rid, struct resource *res)
+{
+	struct generic_pcie_softc *sc;
+	struct rman *rm;
+
+	sc = device_get_softc(dev);
+
+	rm = generic_pcie_rman(sc, type);
+	if (rm != NULL) {
+		KASSERT(rman_is_region_manager(res, rm), ("rman mismatch"));
+		rman_release_resource(res);
+	}
+
+	return (bus_generic_release_resource(dev, child, type, rid, res));
+}
+
+static struct resource *
+generic_pcie_alloc_resource(device_t dev, device_t child, int type, int *rid,
+    u_long start, u_long end, u_long count, u_int flags)
+{
+	struct generic_pcie_softc *sc;
+	struct resource *res;
+	struct rman *rm;
+
+	sc = device_get_softc(dev);
+
+	rm = generic_pcie_rman(sc, type);
+	if (rm == NULL)
+		return (BUS_ALLOC_RESOURCE(device_get_parent(dev), dev,
+		    type, rid, start, end, count, flags));
+
+	if (bootverbose) {
+		device_printf(dev,
+		    "rman_reserve_resource: start=%#lx, end=%#lx, count=%#lx\n",
+		    start, end, count);
+	}
+
+	res = rman_reserve_resource(rm, start, end, count, flags, child);
+	if (res == NULL)
+		goto fail;
+
+	rman_set_rid(res, *rid);
+
+	if (flags & RF_ACTIVE)
+		if (bus_activate_resource(child, type, *rid, res)) {
+			rman_release_resource(res);
+			goto fail;
+		}
+
+	return (res);
+
+fail:
+	if (bootverbose) {
+		device_printf(dev, "%s FAIL: type=%d, rid=%d, "
+		    "start=%016lx, end=%016lx, count=%016lx, flags=%x\n",
+		    __func__, type, *rid, start, end, count, flags);
+	}
+
+	return (NULL);
+}
+
+static int
+generic_pcie_adjust_resource(device_t dev, device_t child, int type,
+    struct resource *res, u_long start, u_long end)
+{
+	struct generic_pcie_softc *sc;
+	struct rman *rm;
+
+	sc = device_get_softc(dev);
+
+	rm = generic_pcie_rman(sc, type);
+	if (rm != NULL)
+		return (rman_adjust_resource(res, start, end));
+	return (bus_generic_adjust_resource(dev, child, type, res, start, end));
+}
+
+static int
+generic_pcie_activate_resource(device_t dev, device_t child, int type, int rid,
+    struct resource *r)
+{
+	struct generic_pcie_softc *sc;
+	uint64_t phys_base;
+	uint64_t pci_base;
+	vm_offset_t vaddr;
+	uint64_t size;
+	int found;
+	int res;
+	int i;
+
+	sc = device_get_softc(dev);
+
+	if ((res = rman_activate_resource(r)) != 0)
+		return (res);
+
+	switch(type) {
+	case SYS_RES_IOPORT:
+		found = 0;
+		for (i = 0; i < MAX_RANGES_TUPLES; i++) {
+			pci_base = sc->ranges[i].pci_base;
+			phys_base = sc->ranges[i].phys_base;
+			size = sc->ranges[i].size;
+
+			if ((rid > pci_base) && (rid < (pci_base + size))) {
+				found = 1;
+				break;
+			}
+		}
+		if (found) {
+			vaddr = (vm_offset_t)pmap_mapdev(rman_get_start(r) + \
+					phys_base, rman_get_size(r));
+			rman_set_virtual(r, (void *)vaddr);
+			rman_set_bustag(r, fdtbus_bs_tag);
+			rman_set_bushandle(r, vaddr);
+		} else {
+			device_printf(dev, "Failed to activate IOPORT resource\n");
+			res = 0;
+		}
+		break;
+	case SYS_RES_MEMORY:
+		vaddr = (vm_offset_t)pmap_mapdev(rman_get_start(r), rman_get_size(r));
+		rman_set_virtual(r, (void *)vaddr);
+		rman_set_bustag(r, fdtbus_bs_tag);
+		rman_set_bushandle(r, vaddr);
+		break;
+	default:
+		break;
+	}
+
+	return (res);
+}
+
+static int
+generic_pcie_deactivate_resource(device_t dev, device_t child, int type, int rid,
+    struct resource *r)
+{
+	struct generic_pcie_softc *sc;
+	vm_offset_t vaddr;
+
+	sc = device_get_softc(dev);
+
+	switch(type) {
+	case SYS_RES_IOPORT:
+	case SYS_RES_MEMORY:
+		vaddr = (vm_offset_t)rman_get_virtual(r);
+		pmap_unmapdev(vaddr, rman_get_size(r));
+		break;
+	default:
+		break;
+	}
+
+	return (rman_deactivate_resource(r));
+}
+
+static int
+generic_pcie_map_msi(device_t pcib, device_t child, int irq,
+    uint64_t *addr, uint32_t *data)
+{
+	int error;
+
+	error = arm_map_msix(child, irq, addr, data);
+	return (error);
+}
+
+static int
+generic_pcie_alloc_msix(device_t pcib, device_t child, int *irq)
+{
+	int error;
+
+	error = arm_alloc_msix(child, irq);
+	return (error);
+}
+
+static int
+generic_pcie_release_msix(device_t pcib, device_t child, int irq)
+{
+	int error;
+
+	error = arm_release_msix(child, irq);
+	return (error);
+}
+
+static int
+generic_pcie_alloc_msi(device_t pcib, device_t child, int count, int maxcount,
+    int *irqs)
+{
+	int error;
+
+	error = arm_alloc_msi(child, count, irqs);
+	return (error);
+}
+
+static int
+generic_pcie_release_msi(device_t pcib, device_t child, int count, int *irqs)
+{
+	int error;
+
+	error = arm_release_msi(child, count, irqs);
+	return (error);
+}
+
+static device_method_t generic_pcie_methods[] = {
+	DEVMETHOD(device_probe,			generic_pcie_probe),
+	DEVMETHOD(device_attach,		generic_pcie_attach),
+	DEVMETHOD(pcib_maxslots,		generic_pcie_maxslots),
+	DEVMETHOD(pcib_read_config,		generic_pcie_read_config),
+	DEVMETHOD(pcib_write_config,		generic_pcie_write_config),
+	DEVMETHOD(bus_read_ivar,		generic_pcie_read_ivar),
+	DEVMETHOD(bus_write_ivar,		generic_pcie_write_ivar),
+	DEVMETHOD(bus_alloc_resource,		generic_pcie_alloc_resource),
+	DEVMETHOD(bus_adjust_resource,		generic_pcie_adjust_resource),
+	DEVMETHOD(bus_release_resource,		generic_pcie_release_resource),
+	DEVMETHOD(bus_activate_resource,	generic_pcie_activate_resource),
+	DEVMETHOD(bus_deactivate_resource,	generic_pcie_deactivate_resource),
+	DEVMETHOD(bus_setup_intr,		bus_generic_setup_intr),
+	DEVMETHOD(bus_teardown_intr,		bus_generic_teardown_intr),
+	DEVMETHOD(pcib_map_msi,			generic_pcie_map_msi),
+	DEVMETHOD(pcib_alloc_msix,		generic_pcie_alloc_msix),
+	DEVMETHOD(pcib_release_msix,		generic_pcie_release_msix),
+	DEVMETHOD(pcib_alloc_msi,		generic_pcie_alloc_msi),
+	DEVMETHOD(pcib_release_msi,		generic_pcie_release_msi),
+
+	DEVMETHOD_END
+};
+
+static driver_t generic_pcie_driver = {
+	"pcib",
+	generic_pcie_methods,
+	sizeof(struct generic_pcie_softc),
+};
+
+static devclass_t generic_pcie_devclass;
+
+DRIVER_MODULE(pcib, simplebus, generic_pcie_driver,
+generic_pcie_devclass, 0, 0);
+DRIVER_MODULE(pcib, ofwbus, generic_pcie_driver,
+generic_pcie_devclass, 0, 0);

Property changes on: sys/dev/pci/pci-host-generic.c
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Added: svn:keywords
## -0,0 +1 ##
+FreeBSD=%H
\ No newline at end of property
Index: sys/dev/virtio/pci/virtio_pci.c
===================================================================
--- sys/dev/virtio/pci/virtio_pci.c	(revision 282765)
+++ sys/dev/virtio/pci/virtio_pci.c	(working copy)
@@ -268,7 +268,7 @@
 	pci_enable_busmaster(dev);
 
 	rid = PCIR_BAR(0);
-	sc->vtpci_res = bus_alloc_resource_any(dev, SYS_RES_IOPORT, &rid,
+	sc->vtpci_res = bus_alloc_resource_any(dev, SYS_RES_MEMORY, &rid,
 	    RF_ACTIVE);
 	if (sc->vtpci_res == NULL) {
 		device_printf(dev, "cannot map I/O space\n");
